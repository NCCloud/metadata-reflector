// Code generated by mockery v2.50.0. DO NOT EDIT.

package clients

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	labels "k8s.io/apimachinery/pkg/labels"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/apps/v1"
)

// MockKubernetesClient is an autogenerated mock type for the KubernetesClient type
type MockKubernetesClient struct {
	mock.Mock
}

type MockKubernetesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKubernetesClient) EXPECT() *MockKubernetesClient_Expecter {
	return &MockKubernetesClient_Expecter{mock: &_m.Mock}
}

// GetDeployment provides a mock function with given fields: ctx, namespacedName
func (_m *MockKubernetesClient) GetDeployment(ctx context.Context, namespacedName types.NamespacedName) (*v1.Deployment, error) {
	ret := _m.Called(ctx, namespacedName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) (*v1.Deployment, error)); ok {
		return rf(ctx, namespacedName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) *v1.Deployment); ok {
		r0 = rf(ctx, namespacedName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.NamespacedName) error); ok {
		r1 = rf(ctx, namespacedName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKubernetesClient_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type MockKubernetesClient_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - namespacedName types.NamespacedName
func (_e *MockKubernetesClient_Expecter) GetDeployment(ctx interface{}, namespacedName interface{}) *MockKubernetesClient_GetDeployment_Call {
	return &MockKubernetesClient_GetDeployment_Call{Call: _e.mock.On("GetDeployment", ctx, namespacedName)}
}

func (_c *MockKubernetesClient_GetDeployment_Call) Run(run func(ctx context.Context, namespacedName types.NamespacedName)) *MockKubernetesClient_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NamespacedName))
	})
	return _c
}

func (_c *MockKubernetesClient_GetDeployment_Call) Return(_a0 *v1.Deployment, _a1 error) *MockKubernetesClient_GetDeployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKubernetesClient_GetDeployment_Call) RunAndReturn(run func(context.Context, types.NamespacedName) (*v1.Deployment, error)) *MockKubernetesClient_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployments provides a mock function with given fields: ctx, labelSelector
func (_m *MockKubernetesClient) ListDeployments(ctx context.Context, labelSelector labels.Selector) (*v1.DeploymentList, error) {
	ret := _m.Called(ctx, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *v1.DeploymentList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, labels.Selector) (*v1.DeploymentList, error)); ok {
		return rf(ctx, labelSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, labels.Selector) *v1.DeploymentList); ok {
		r0 = rf(ctx, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeploymentList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, labels.Selector) error); ok {
		r1 = rf(ctx, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKubernetesClient_ListDeployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployments'
type MockKubernetesClient_ListDeployments_Call struct {
	*mock.Call
}

// ListDeployments is a helper method to define mock.On call
//   - ctx context.Context
//   - labelSelector labels.Selector
func (_e *MockKubernetesClient_Expecter) ListDeployments(ctx interface{}, labelSelector interface{}) *MockKubernetesClient_ListDeployments_Call {
	return &MockKubernetesClient_ListDeployments_Call{Call: _e.mock.On("ListDeployments", ctx, labelSelector)}
}

func (_c *MockKubernetesClient_ListDeployments_Call) Run(run func(ctx context.Context, labelSelector labels.Selector)) *MockKubernetesClient_ListDeployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(labels.Selector))
	})
	return _c
}

func (_c *MockKubernetesClient_ListDeployments_Call) Return(_a0 *v1.DeploymentList, _a1 error) *MockKubernetesClient_ListDeployments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKubernetesClient_ListDeployments_Call) RunAndReturn(run func(context.Context, labels.Selector) (*v1.DeploymentList, error)) *MockKubernetesClient_ListDeployments_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields: ctx, labelSelector
func (_m *MockKubernetesClient) ListPods(ctx context.Context, labelSelector labels.Selector) (*corev1.PodList, error) {
	ret := _m.Called(ctx, labelSelector)

	if len(ret) == 0 {
		panic("no return value specified for ListPods")
	}

	var r0 *corev1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, labels.Selector) (*corev1.PodList, error)); ok {
		return rf(ctx, labelSelector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, labels.Selector) *corev1.PodList); ok {
		r0 = rf(ctx, labelSelector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, labels.Selector) error); ok {
		r1 = rf(ctx, labelSelector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKubernetesClient_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type MockKubernetesClient_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
//   - ctx context.Context
//   - labelSelector labels.Selector
func (_e *MockKubernetesClient_Expecter) ListPods(ctx interface{}, labelSelector interface{}) *MockKubernetesClient_ListPods_Call {
	return &MockKubernetesClient_ListPods_Call{Call: _e.mock.On("ListPods", ctx, labelSelector)}
}

func (_c *MockKubernetesClient_ListPods_Call) Run(run func(ctx context.Context, labelSelector labels.Selector)) *MockKubernetesClient_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(labels.Selector))
	})
	return _c
}

func (_c *MockKubernetesClient_ListPods_Call) Return(_a0 *corev1.PodList, _a1 error) *MockKubernetesClient_ListPods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKubernetesClient_ListPods_Call) RunAndReturn(run func(context.Context, labels.Selector) (*corev1.PodList, error)) *MockKubernetesClient_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePod provides a mock function with given fields: ctx, pod
func (_m *MockKubernetesClient) UpdatePod(ctx context.Context, pod corev1.Pod) error {
	ret := _m.Called(ctx, pod)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, corev1.Pod) error); ok {
		r0 = rf(ctx, pod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKubernetesClient_UpdatePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePod'
type MockKubernetesClient_UpdatePod_Call struct {
	*mock.Call
}

// UpdatePod is a helper method to define mock.On call
//   - ctx context.Context
//   - pod corev1.Pod
func (_e *MockKubernetesClient_Expecter) UpdatePod(ctx interface{}, pod interface{}) *MockKubernetesClient_UpdatePod_Call {
	return &MockKubernetesClient_UpdatePod_Call{Call: _e.mock.On("UpdatePod", ctx, pod)}
}

func (_c *MockKubernetesClient_UpdatePod_Call) Run(run func(ctx context.Context, pod corev1.Pod)) *MockKubernetesClient_UpdatePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(corev1.Pod))
	})
	return _c
}

func (_c *MockKubernetesClient_UpdatePod_Call) Return(_a0 error) *MockKubernetesClient_UpdatePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKubernetesClient_UpdatePod_Call) RunAndReturn(run func(context.Context, corev1.Pod) error) *MockKubernetesClient_UpdatePod_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKubernetesClient creates a new instance of MockKubernetesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKubernetesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKubernetesClient {
	mock := &MockKubernetesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
